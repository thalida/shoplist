/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation CreateProduct($name: String!, $targetQuantity: Float, $currentStock: Float, $unit: UUID, $categories: [UUID], $stores: [JSONString]) {\n  createProduct(\n    input: {name: $name, targetQuantity: $targetQuantity, currentStock: $currentStock, unit: $unit, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      targetQuantity\n      currentStock\n      unit {\n        uid\n        name\n      }\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.CreateProductDocument,
    "mutation CreateProductCategory($name: String!, $color: String) {\n  createProductCategory(input: {name: $name, color: $color}) {\n    productCategory {\n      uid\n      name\n      color\n    }\n  }\n}": types.CreateProductCategoryDocument,
    "mutation DeleteProduct($uid: UUID!) {\n  deleteProduct(input: {uid: $uid}) {\n    product {\n      uid\n      name\n    }\n  }\n}": types.DeleteProductDocument,
    "mutation UpdateProduct($uid: UUID!, $name: String, $targetQuantity: Float, $currentStock: Float, $unit: UUID, $categories: [UUID], $stores: [JSONString]) {\n  updateProduct(\n    input: {uid: $uid, name: $name, targetQuantity: $targetQuantity, currentStock: $currentStock, unit: $unit, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.UpdateProductDocument,
    "query AllProductCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allProductCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}": types.AllProductCategoriesDocument,
    "query AllProductUnits($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String) {\n  allProductUnits(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        abbreviation\n      }\n    }\n  }\n}": types.AllProductUnitsDocument,
    "query AllProducts($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $stores: [ID], $currentStock: Float, $currentStock_Lt: Float, $currentStock_Gt: Float, $targetQuantity: Float, $targetQuantity_Lt: Float, $targetQuantity_Gt: Float, $unit: [ID], $toBuy: Boolean) {\n  allProducts(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    stores: $stores\n    currentStock: $currentStock\n    currentStock_Lt: $currentStock_Lt\n    currentStock_Gt: $currentStock_Gt\n    targetQuantity: $targetQuantity\n    targetQuantity_Lt: $targetQuantity_Lt\n    targetQuantity_Gt: $targetQuantity_Gt\n    unit: $unit\n    toBuy: $toBuy\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        currentStock\n        targetQuantity\n        unit {\n          uid\n          name\n        }\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        stores {\n          edges {\n            node {\n              id\n              price\n              section {\n                uid\n                name\n              }\n              store {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AllProductsDocument,
    "query AllStoreCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allStoreCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}": types.AllStoreCategoriesDocument,
    "query AllStores($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $products: [ID]) {\n  allStores(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        sections {\n          edges {\n            node {\n              uid\n              name\n              sectionType {\n                uid\n                name\n              }\n            }\n          }\n        }\n        products {\n          edges {\n            node {\n              price\n              section {\n                uid\n                name\n                sectionType {\n                  uid\n                  name\n                }\n              }\n              product {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AllStoresDocument,
    "query Product($uid: ID!) {\n  product(id: $uid) {\n    uid\n    name\n    currentStock\n    targetQuantity\n    unit {\n      uid\n      name\n    }\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    stores {\n      edges {\n        node {\n          id\n          price\n          section {\n            uid\n            name\n          }\n          store {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}": types.ProductDocument,
    "query Store($uid: ID!) {\n  store(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    sections {\n      edges {\n        node {\n          uid\n          name\n          sectionType {\n            uid\n            name\n          }\n        }\n      }\n    }\n    products {\n      edges {\n        node {\n          price\n          section {\n            uid\n            name\n            sectionType {\n              uid\n              name\n            }\n          }\n          product {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}": types.StoreDocument,
    "mutation RegisterSocial($socialAccessToken: String!, $socialBackend: String!) {\n  registerSocial(\n    input: {accessToken: $socialAccessToken, socialBackend: $socialBackend}\n  ) {\n    token\n  }\n}": types.RegisterSocialDocument,
    "mutation TokenAuth($username: String!, $password: String!) {\n  tokenAuth(input: {username: $username, password: $password}) {\n    token\n  }\n}": types.TokenAuthDocument,
    "mutation VerifyToken($token: String!) {\n  verifyToken(input: {token: $token}) {\n    payload\n  }\n}": types.VerifyTokenDocument,
    "query Me {\n  me {\n    id\n    uid\n    username\n    email\n    firstName\n    lastName\n    avatar\n  }\n}": types.MeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateProduct($name: String!, $targetQuantity: Float, $currentStock: Float, $unit: UUID, $categories: [UUID], $stores: [JSONString]) {\n  createProduct(\n    input: {name: $name, targetQuantity: $targetQuantity, currentStock: $currentStock, unit: $unit, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      targetQuantity\n      currentStock\n      unit {\n        uid\n        name\n      }\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation CreateProduct($name: String!, $targetQuantity: Float, $currentStock: Float, $unit: UUID, $categories: [UUID], $stores: [JSONString]) {\n  createProduct(\n    input: {name: $name, targetQuantity: $targetQuantity, currentStock: $currentStock, unit: $unit, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      targetQuantity\n      currentStock\n      unit {\n        uid\n        name\n      }\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateProductCategory($name: String!, $color: String) {\n  createProductCategory(input: {name: $name, color: $color}) {\n    productCategory {\n      uid\n      name\n      color\n    }\n  }\n}"): (typeof documents)["mutation CreateProductCategory($name: String!, $color: String) {\n  createProductCategory(input: {name: $name, color: $color}) {\n    productCategory {\n      uid\n      name\n      color\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DeleteProduct($uid: UUID!) {\n  deleteProduct(input: {uid: $uid}) {\n    product {\n      uid\n      name\n    }\n  }\n}"): (typeof documents)["mutation DeleteProduct($uid: UUID!) {\n  deleteProduct(input: {uid: $uid}) {\n    product {\n      uid\n      name\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateProduct($uid: UUID!, $name: String, $targetQuantity: Float, $currentStock: Float, $unit: UUID, $categories: [UUID], $stores: [JSONString]) {\n  updateProduct(\n    input: {uid: $uid, name: $name, targetQuantity: $targetQuantity, currentStock: $currentStock, unit: $unit, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation UpdateProduct($uid: UUID!, $name: String, $targetQuantity: Float, $currentStock: Float, $unit: UUID, $categories: [UUID], $stores: [JSONString]) {\n  updateProduct(\n    input: {uid: $uid, name: $name, targetQuantity: $targetQuantity, currentStock: $currentStock, unit: $unit, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllProductCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allProductCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"): (typeof documents)["query AllProductCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allProductCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllProductUnits($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String) {\n  allProductUnits(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        abbreviation\n      }\n    }\n  }\n}"): (typeof documents)["query AllProductUnits($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String) {\n  allProductUnits(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        abbreviation\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllProducts($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $stores: [ID], $currentStock: Float, $currentStock_Lt: Float, $currentStock_Gt: Float, $targetQuantity: Float, $targetQuantity_Lt: Float, $targetQuantity_Gt: Float, $unit: [ID], $toBuy: Boolean) {\n  allProducts(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    stores: $stores\n    currentStock: $currentStock\n    currentStock_Lt: $currentStock_Lt\n    currentStock_Gt: $currentStock_Gt\n    targetQuantity: $targetQuantity\n    targetQuantity_Lt: $targetQuantity_Lt\n    targetQuantity_Gt: $targetQuantity_Gt\n    unit: $unit\n    toBuy: $toBuy\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        currentStock\n        targetQuantity\n        unit {\n          uid\n          name\n        }\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        stores {\n          edges {\n            node {\n              id\n              price\n              section {\n                uid\n                name\n              }\n              store {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllProducts($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $stores: [ID], $currentStock: Float, $currentStock_Lt: Float, $currentStock_Gt: Float, $targetQuantity: Float, $targetQuantity_Lt: Float, $targetQuantity_Gt: Float, $unit: [ID], $toBuy: Boolean) {\n  allProducts(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    stores: $stores\n    currentStock: $currentStock\n    currentStock_Lt: $currentStock_Lt\n    currentStock_Gt: $currentStock_Gt\n    targetQuantity: $targetQuantity\n    targetQuantity_Lt: $targetQuantity_Lt\n    targetQuantity_Gt: $targetQuantity_Gt\n    unit: $unit\n    toBuy: $toBuy\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        currentStock\n        targetQuantity\n        unit {\n          uid\n          name\n        }\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        stores {\n          edges {\n            node {\n              id\n              price\n              section {\n                uid\n                name\n              }\n              store {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllStoreCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allStoreCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"): (typeof documents)["query AllStoreCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allStoreCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllStores($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $products: [ID]) {\n  allStores(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        sections {\n          edges {\n            node {\n              uid\n              name\n              sectionType {\n                uid\n                name\n              }\n            }\n          }\n        }\n        products {\n          edges {\n            node {\n              price\n              section {\n                uid\n                name\n                sectionType {\n                  uid\n                  name\n                }\n              }\n              product {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllStores($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $products: [ID]) {\n  allStores(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        sections {\n          edges {\n            node {\n              uid\n              name\n              sectionType {\n                uid\n                name\n              }\n            }\n          }\n        }\n        products {\n          edges {\n            node {\n              price\n              section {\n                uid\n                name\n                sectionType {\n                  uid\n                  name\n                }\n              }\n              product {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Product($uid: ID!) {\n  product(id: $uid) {\n    uid\n    name\n    currentStock\n    targetQuantity\n    unit {\n      uid\n      name\n    }\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    stores {\n      edges {\n        node {\n          id\n          price\n          section {\n            uid\n            name\n          }\n          store {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query Product($uid: ID!) {\n  product(id: $uid) {\n    uid\n    name\n    currentStock\n    targetQuantity\n    unit {\n      uid\n      name\n    }\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    stores {\n      edges {\n        node {\n          id\n          price\n          section {\n            uid\n            name\n          }\n          store {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Store($uid: ID!) {\n  store(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    sections {\n      edges {\n        node {\n          uid\n          name\n          sectionType {\n            uid\n            name\n          }\n        }\n      }\n    }\n    products {\n      edges {\n        node {\n          price\n          section {\n            uid\n            name\n            sectionType {\n              uid\n              name\n            }\n          }\n          product {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query Store($uid: ID!) {\n  store(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    sections {\n      edges {\n        node {\n          uid\n          name\n          sectionType {\n            uid\n            name\n          }\n        }\n      }\n    }\n    products {\n      edges {\n        node {\n          price\n          section {\n            uid\n            name\n            sectionType {\n              uid\n              name\n            }\n          }\n          product {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RegisterSocial($socialAccessToken: String!, $socialBackend: String!) {\n  registerSocial(\n    input: {accessToken: $socialAccessToken, socialBackend: $socialBackend}\n  ) {\n    token\n  }\n}"): (typeof documents)["mutation RegisterSocial($socialAccessToken: String!, $socialBackend: String!) {\n  registerSocial(\n    input: {accessToken: $socialAccessToken, socialBackend: $socialBackend}\n  ) {\n    token\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation TokenAuth($username: String!, $password: String!) {\n  tokenAuth(input: {username: $username, password: $password}) {\n    token\n  }\n}"): (typeof documents)["mutation TokenAuth($username: String!, $password: String!) {\n  tokenAuth(input: {username: $username, password: $password}) {\n    token\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation VerifyToken($token: String!) {\n  verifyToken(input: {token: $token}) {\n    payload\n  }\n}"): (typeof documents)["mutation VerifyToken($token: String!) {\n  verifyToken(input: {token: $token}) {\n    payload\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Me {\n  me {\n    id\n    uid\n    username\n    email\n    firstName\n    lastName\n    avatar\n  }\n}"): (typeof documents)["query Me {\n  me {\n    id\n    uid\n    username\n    email\n    firstName\n    lastName\n    avatar\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;