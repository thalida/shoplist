/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation CreateProduct($name: String!, $categories: [UUID], $stores: [JSONString]) {\n  createProduct(input: {name: $name, categories: $categories, stores: $stores}) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.CreateProductDocument,
    "mutation CreateProductCategory($name: String!, $color: String) {\n  createProductCategory(input: {name: $name, color: $color}) {\n    productCategory {\n      uid\n      name\n      color\n    }\n  }\n}": types.CreateProductCategoryDocument,
    "mutation DeleteProduct($uid: UUID!) {\n  deleteProduct(input: {uid: $uid}) {\n    product {\n      uid\n      name\n    }\n  }\n}": types.DeleteProductDocument,
    "mutation UpdateProduct($uid: UUID!, $name: String, $categories: [UUID], $stores: [JSONString]) {\n  updateProduct(\n    input: {uid: $uid, name: $name, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.UpdateProductDocument,
    "query AllPantries($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String, $products: [ID]) {\n  allPantries(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        products {\n          totalCount\n          filteredCount\n        }\n      }\n    }\n  }\n}": types.AllPantriesDocument,
    "query AllProductCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allProductCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}": types.AllProductCategoriesDocument,
    "query AllProductUnits($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String) {\n  allProductUnits(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        abbreviation\n      }\n    }\n  }\n}": types.AllProductUnitsDocument,
    "query AllProducts($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $stores: [ID]) {\n  allProducts(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    stores: $stores\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        stores {\n          edges {\n            node {\n              id\n              price\n              section {\n                uid\n                name\n              }\n              store {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AllProductsDocument,
    "query AllRecipeCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allRecipeCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}": types.AllRecipeCategoriesDocument,
    "query AllRecipes($uid: UUID, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $name: String, $name_Icontains: String, $description: String, $description_Icontains: String, $url: String, $url_Icontains: String, $isPlanned: Boolean, $isFavorite: Boolean, $categories: [ID], $products: [ID], $orderBy: String) {\n  allRecipes(\n    uid: $uid\n    offset: $offset\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    name: $name\n    name_Icontains: $name_Icontains\n    description: $description\n    description_Icontains: $description_Icontains\n    url: $url\n    url_Icontains: $url_Icontains\n    isPlanned: $isPlanned\n    isFavorite: $isFavorite\n    categories: $categories\n    products: $products\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        description\n        products {\n          totalCount\n          filteredCount\n        }\n      }\n    }\n  }\n}": types.AllRecipesDocument,
    "query AllRecipesWithProducts($uid: UUID, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $name: String, $name_Icontains: String, $description: String, $description_Icontains: String, $url: String, $url_Icontains: String, $isPlanned: Boolean, $isFavorite: Boolean, $categories: [ID], $products: [ID], $orderBy: String) {\n  allRecipes(\n    uid: $uid\n    offset: $offset\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    name: $name\n    name_Icontains: $name_Icontains\n    description: $description\n    description_Icontains: $description_Icontains\n    url: $url\n    url_Icontains: $url_Icontains\n    isPlanned: $isPlanned\n    isFavorite: $isFavorite\n    categories: $categories\n    products: $products\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        description\n        products {\n          totalCount\n          filteredCount\n          edges {\n            node {\n              id\n              quantity\n              unit {\n                uid\n                name\n              }\n              notes\n              product {\n                uid\n                name\n                categories {\n                  edges {\n                    node {\n                      uid\n                      name\n                      color\n                    }\n                  }\n                }\n                stores {\n                  edges {\n                    node {\n                      id\n                      price\n                      section {\n                        uid\n                        name\n                      }\n                      store {\n                        uid\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AllRecipesWithProductsDocument,
    "query AllStoreCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allStoreCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}": types.AllStoreCategoriesDocument,
    "query AllStores($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $products: [ID]) {\n  allStores(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        sections {\n          edges {\n            node {\n              uid\n              name\n              sectionType {\n                uid\n                name\n              }\n            }\n          }\n        }\n        products {\n          edges {\n            node {\n              price\n              section {\n                uid\n                name\n                sectionType {\n                  uid\n                  name\n                }\n              }\n              product {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.AllStoresDocument,
    "query Pantry($uid: ID!, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $pantry: ID, $product: ID, $product_Name: String, $product_Name_Icontains: String, $quantity: Float, $quantity_Gte: Float, $quantity_Lte: Float, $minimumQuantity: Float, $minimumQuantity_Gte: Float, $minimumQuantity_Lte: Float, $unit: ID, $notes: String, $notes_Icontains: String, $expirationDate: Date, $expirationDate_Before: Date, $expirationDate_After: Date, $restock: Boolean, $orderBy: String) {\n  pantry(id: $uid) {\n    uid\n    name\n    products(\n      offset: $offset\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      pantry: $pantry\n      product: $product\n      product_Name: $product_Name\n      product_Name_Icontains: $product_Name_Icontains\n      quantity: $quantity\n      quantity_Gte: $quantity_Gte\n      quantity_Lte: $quantity_Lte\n      minimumQuantity: $minimumQuantity\n      minimumQuantity_Gte: $minimumQuantity_Gte\n      minimumQuantity_Lte: $minimumQuantity_Lte\n      unit: $unit\n      notes: $notes\n      notes_Icontains: $notes_Icontains\n      expirationDate: $expirationDate\n      expirationDate_Before: $expirationDate_Before\n      expirationDate_After: $expirationDate_After\n      restock: $restock\n      orderBy: $orderBy\n    ) {\n      totalCount\n      filteredCount\n      edges {\n        node {\n          id\n          quantity\n          minimumQuantity\n          unit {\n            uid\n            name\n          }\n          buyThreshold\n          expirationDate\n          notes\n          product {\n            uid\n            name\n            categories {\n              edges {\n                node {\n                  uid\n                  name\n                  color\n                }\n              }\n            }\n            stores {\n              edges {\n                node {\n                  id\n                  price\n                  section {\n                    uid\n                    name\n                  }\n                  store {\n                    uid\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.PantryDocument,
    "query Product($uid: ID!) {\n  product(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    stores {\n      edges {\n        node {\n          id\n          price\n          section {\n            uid\n            name\n          }\n          store {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}": types.ProductDocument,
    "query ProductCategory($uid: ID!) {\n  productCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}": types.ProductCategoryDocument,
    "query ProductUnit($uid: ID!) {\n  productUnit(id: $uid) {\n    uid\n    name\n    abbreviation\n  }\n}": types.ProductUnitDocument,
    "query RecipeCategory($uid: ID!) {\n  recipeCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}": types.RecipeCategoryDocument,
    "query Store($uid: ID!) {\n  store(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    sections {\n      edges {\n        node {\n          uid\n          name\n          sectionType {\n            uid\n            name\n          }\n        }\n      }\n    }\n    products {\n      edges {\n        node {\n          price\n          section {\n            uid\n            name\n            sectionType {\n              uid\n              name\n            }\n          }\n          product {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}": types.StoreDocument,
    "query StoreCategory($uid: ID!) {\n  storeCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}": types.StoreCategoryDocument,
    "mutation RegisterSocial($socialAccessToken: String!, $socialBackend: String!) {\n  registerSocial(\n    input: {accessToken: $socialAccessToken, socialBackend: $socialBackend}\n  ) {\n    token\n  }\n}": types.RegisterSocialDocument,
    "mutation TokenAuth($username: String!, $password: String!) {\n  tokenAuth(input: {username: $username, password: $password}) {\n    token\n  }\n}": types.TokenAuthDocument,
    "mutation VerifyToken($token: String!) {\n  verifyToken(input: {token: $token}) {\n    payload\n  }\n}": types.VerifyTokenDocument,
    "query Me {\n  me {\n    id\n    uid\n    username\n    email\n    firstName\n    lastName\n    avatar\n  }\n}": types.MeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateProduct($name: String!, $categories: [UUID], $stores: [JSONString]) {\n  createProduct(input: {name: $name, categories: $categories, stores: $stores}) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation CreateProduct($name: String!, $categories: [UUID], $stores: [JSONString]) {\n  createProduct(input: {name: $name, categories: $categories, stores: $stores}) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateProductCategory($name: String!, $color: String) {\n  createProductCategory(input: {name: $name, color: $color}) {\n    productCategory {\n      uid\n      name\n      color\n    }\n  }\n}"): (typeof documents)["mutation CreateProductCategory($name: String!, $color: String) {\n  createProductCategory(input: {name: $name, color: $color}) {\n    productCategory {\n      uid\n      name\n      color\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DeleteProduct($uid: UUID!) {\n  deleteProduct(input: {uid: $uid}) {\n    product {\n      uid\n      name\n    }\n  }\n}"): (typeof documents)["mutation DeleteProduct($uid: UUID!) {\n  deleteProduct(input: {uid: $uid}) {\n    product {\n      uid\n      name\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateProduct($uid: UUID!, $name: String, $categories: [UUID], $stores: [JSONString]) {\n  updateProduct(\n    input: {uid: $uid, name: $name, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation UpdateProduct($uid: UUID!, $name: String, $categories: [UUID], $stores: [JSONString]) {\n  updateProduct(\n    input: {uid: $uid, name: $name, categories: $categories, stores: $stores}\n  ) {\n    product {\n      uid\n      name\n      categories {\n        edges {\n          node {\n            uid\n            name\n            color\n          }\n        }\n      }\n      stores {\n        edges {\n          node {\n            store {\n              uid\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllPantries($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String, $products: [ID]) {\n  allPantries(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        products {\n          totalCount\n          filteredCount\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllPantries($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String, $products: [ID]) {\n  allPantries(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        products {\n          totalCount\n          filteredCount\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllProductCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allProductCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"): (typeof documents)["query AllProductCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allProductCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllProductUnits($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String) {\n  allProductUnits(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        abbreviation\n      }\n    }\n  }\n}"): (typeof documents)["query AllProductUnits($uid: UUID, $name: String, $name_Icontains: String, $orderBy: String) {\n  allProductUnits(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        abbreviation\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllProducts($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $stores: [ID]) {\n  allProducts(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    stores: $stores\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        stores {\n          edges {\n            node {\n              id\n              price\n              section {\n                uid\n                name\n              }\n              store {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllProducts($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $stores: [ID]) {\n  allProducts(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    stores: $stores\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        stores {\n          edges {\n            node {\n              id\n              price\n              section {\n                uid\n                name\n              }\n              store {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllRecipeCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allRecipeCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"): (typeof documents)["query AllRecipeCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allRecipeCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllRecipes($uid: UUID, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $name: String, $name_Icontains: String, $description: String, $description_Icontains: String, $url: String, $url_Icontains: String, $isPlanned: Boolean, $isFavorite: Boolean, $categories: [ID], $products: [ID], $orderBy: String) {\n  allRecipes(\n    uid: $uid\n    offset: $offset\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    name: $name\n    name_Icontains: $name_Icontains\n    description: $description\n    description_Icontains: $description_Icontains\n    url: $url\n    url_Icontains: $url_Icontains\n    isPlanned: $isPlanned\n    isFavorite: $isFavorite\n    categories: $categories\n    products: $products\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        description\n        products {\n          totalCount\n          filteredCount\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllRecipes($uid: UUID, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $name: String, $name_Icontains: String, $description: String, $description_Icontains: String, $url: String, $url_Icontains: String, $isPlanned: Boolean, $isFavorite: Boolean, $categories: [ID], $products: [ID], $orderBy: String) {\n  allRecipes(\n    uid: $uid\n    offset: $offset\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    name: $name\n    name_Icontains: $name_Icontains\n    description: $description\n    description_Icontains: $description_Icontains\n    url: $url\n    url_Icontains: $url_Icontains\n    isPlanned: $isPlanned\n    isFavorite: $isFavorite\n    categories: $categories\n    products: $products\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        description\n        products {\n          totalCount\n          filteredCount\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllRecipesWithProducts($uid: UUID, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $name: String, $name_Icontains: String, $description: String, $description_Icontains: String, $url: String, $url_Icontains: String, $isPlanned: Boolean, $isFavorite: Boolean, $categories: [ID], $products: [ID], $orderBy: String) {\n  allRecipes(\n    uid: $uid\n    offset: $offset\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    name: $name\n    name_Icontains: $name_Icontains\n    description: $description\n    description_Icontains: $description_Icontains\n    url: $url\n    url_Icontains: $url_Icontains\n    isPlanned: $isPlanned\n    isFavorite: $isFavorite\n    categories: $categories\n    products: $products\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        description\n        products {\n          totalCount\n          filteredCount\n          edges {\n            node {\n              id\n              quantity\n              unit {\n                uid\n                name\n              }\n              notes\n              product {\n                uid\n                name\n                categories {\n                  edges {\n                    node {\n                      uid\n                      name\n                      color\n                    }\n                  }\n                }\n                stores {\n                  edges {\n                    node {\n                      id\n                      price\n                      section {\n                        uid\n                        name\n                      }\n                      store {\n                        uid\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllRecipesWithProducts($uid: UUID, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $name: String, $name_Icontains: String, $description: String, $description_Icontains: String, $url: String, $url_Icontains: String, $isPlanned: Boolean, $isFavorite: Boolean, $categories: [ID], $products: [ID], $orderBy: String) {\n  allRecipes(\n    uid: $uid\n    offset: $offset\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n    name: $name\n    name_Icontains: $name_Icontains\n    description: $description\n    description_Icontains: $description_Icontains\n    url: $url\n    url_Icontains: $url_Icontains\n    isPlanned: $isPlanned\n    isFavorite: $isFavorite\n    categories: $categories\n    products: $products\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        description\n        products {\n          totalCount\n          filteredCount\n          edges {\n            node {\n              id\n              quantity\n              unit {\n                uid\n                name\n              }\n              notes\n              product {\n                uid\n                name\n                categories {\n                  edges {\n                    node {\n                      uid\n                      name\n                      color\n                    }\n                  }\n                }\n                stores {\n                  edges {\n                    node {\n                      id\n                      price\n                      section {\n                        uid\n                        name\n                      }\n                      store {\n                        uid\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllStoreCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allStoreCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"): (typeof documents)["query AllStoreCategories($uid: UUID, $name: String, $name_Icontains: String, $color: String, $orderBy: String) {\n  allStoreCategories(\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    color: $color\n    orderBy: $orderBy\n  ) {\n    totalCount\n    filteredCount\n    edges {\n      node {\n        uid\n        name\n        color\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query AllStores($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $products: [ID]) {\n  allStores(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        sections {\n          edges {\n            node {\n              uid\n              name\n              sectionType {\n                uid\n                name\n              }\n            }\n          }\n        }\n        products {\n          edges {\n            node {\n              price\n              section {\n                uid\n                name\n                sectionType {\n                  uid\n                  name\n                }\n              }\n              product {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query AllStores($first: Int, $after: String, $last: Int, $before: String, $orderBy: String, $uid: UUID, $name: String, $name_Icontains: String, $categories: [ID], $products: [ID]) {\n  allStores(\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n    orderBy: $orderBy\n    uid: $uid\n    name: $name\n    name_Icontains: $name_Icontains\n    categories: $categories\n    products: $products\n  ) {\n    totalCount\n    filteredCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        uid\n        name\n        categories {\n          edges {\n            node {\n              uid\n              name\n              color\n            }\n          }\n        }\n        sections {\n          edges {\n            node {\n              uid\n              name\n              sectionType {\n                uid\n                name\n              }\n            }\n          }\n        }\n        products {\n          edges {\n            node {\n              price\n              section {\n                uid\n                name\n                sectionType {\n                  uid\n                  name\n                }\n              }\n              product {\n                uid\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Pantry($uid: ID!, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $pantry: ID, $product: ID, $product_Name: String, $product_Name_Icontains: String, $quantity: Float, $quantity_Gte: Float, $quantity_Lte: Float, $minimumQuantity: Float, $minimumQuantity_Gte: Float, $minimumQuantity_Lte: Float, $unit: ID, $notes: String, $notes_Icontains: String, $expirationDate: Date, $expirationDate_Before: Date, $expirationDate_After: Date, $restock: Boolean, $orderBy: String) {\n  pantry(id: $uid) {\n    uid\n    name\n    products(\n      offset: $offset\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      pantry: $pantry\n      product: $product\n      product_Name: $product_Name\n      product_Name_Icontains: $product_Name_Icontains\n      quantity: $quantity\n      quantity_Gte: $quantity_Gte\n      quantity_Lte: $quantity_Lte\n      minimumQuantity: $minimumQuantity\n      minimumQuantity_Gte: $minimumQuantity_Gte\n      minimumQuantity_Lte: $minimumQuantity_Lte\n      unit: $unit\n      notes: $notes\n      notes_Icontains: $notes_Icontains\n      expirationDate: $expirationDate\n      expirationDate_Before: $expirationDate_Before\n      expirationDate_After: $expirationDate_After\n      restock: $restock\n      orderBy: $orderBy\n    ) {\n      totalCount\n      filteredCount\n      edges {\n        node {\n          id\n          quantity\n          minimumQuantity\n          unit {\n            uid\n            name\n          }\n          buyThreshold\n          expirationDate\n          notes\n          product {\n            uid\n            name\n            categories {\n              edges {\n                node {\n                  uid\n                  name\n                  color\n                }\n              }\n            }\n            stores {\n              edges {\n                node {\n                  id\n                  price\n                  section {\n                    uid\n                    name\n                  }\n                  store {\n                    uid\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query Pantry($uid: ID!, $offset: Int, $before: String, $after: String, $first: Int, $last: Int, $pantry: ID, $product: ID, $product_Name: String, $product_Name_Icontains: String, $quantity: Float, $quantity_Gte: Float, $quantity_Lte: Float, $minimumQuantity: Float, $minimumQuantity_Gte: Float, $minimumQuantity_Lte: Float, $unit: ID, $notes: String, $notes_Icontains: String, $expirationDate: Date, $expirationDate_Before: Date, $expirationDate_After: Date, $restock: Boolean, $orderBy: String) {\n  pantry(id: $uid) {\n    uid\n    name\n    products(\n      offset: $offset\n      before: $before\n      after: $after\n      first: $first\n      last: $last\n      pantry: $pantry\n      product: $product\n      product_Name: $product_Name\n      product_Name_Icontains: $product_Name_Icontains\n      quantity: $quantity\n      quantity_Gte: $quantity_Gte\n      quantity_Lte: $quantity_Lte\n      minimumQuantity: $minimumQuantity\n      minimumQuantity_Gte: $minimumQuantity_Gte\n      minimumQuantity_Lte: $minimumQuantity_Lte\n      unit: $unit\n      notes: $notes\n      notes_Icontains: $notes_Icontains\n      expirationDate: $expirationDate\n      expirationDate_Before: $expirationDate_Before\n      expirationDate_After: $expirationDate_After\n      restock: $restock\n      orderBy: $orderBy\n    ) {\n      totalCount\n      filteredCount\n      edges {\n        node {\n          id\n          quantity\n          minimumQuantity\n          unit {\n            uid\n            name\n          }\n          buyThreshold\n          expirationDate\n          notes\n          product {\n            uid\n            name\n            categories {\n              edges {\n                node {\n                  uid\n                  name\n                  color\n                }\n              }\n            }\n            stores {\n              edges {\n                node {\n                  id\n                  price\n                  section {\n                    uid\n                    name\n                  }\n                  store {\n                    uid\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Product($uid: ID!) {\n  product(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    stores {\n      edges {\n        node {\n          id\n          price\n          section {\n            uid\n            name\n          }\n          store {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query Product($uid: ID!) {\n  product(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    stores {\n      edges {\n        node {\n          id\n          price\n          section {\n            uid\n            name\n          }\n          store {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProductCategory($uid: ID!) {\n  productCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}"): (typeof documents)["query ProductCategory($uid: ID!) {\n  productCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ProductUnit($uid: ID!) {\n  productUnit(id: $uid) {\n    uid\n    name\n    abbreviation\n  }\n}"): (typeof documents)["query ProductUnit($uid: ID!) {\n  productUnit(id: $uid) {\n    uid\n    name\n    abbreviation\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query RecipeCategory($uid: ID!) {\n  recipeCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}"): (typeof documents)["query RecipeCategory($uid: ID!) {\n  recipeCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Store($uid: ID!) {\n  store(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    sections {\n      edges {\n        node {\n          uid\n          name\n          sectionType {\n            uid\n            name\n          }\n        }\n      }\n    }\n    products {\n      edges {\n        node {\n          price\n          section {\n            uid\n            name\n            sectionType {\n              uid\n              name\n            }\n          }\n          product {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query Store($uid: ID!) {\n  store(id: $uid) {\n    uid\n    name\n    categories {\n      edges {\n        node {\n          uid\n          name\n          color\n        }\n      }\n    }\n    sections {\n      edges {\n        node {\n          uid\n          name\n          sectionType {\n            uid\n            name\n          }\n        }\n      }\n    }\n    products {\n      edges {\n        node {\n          price\n          section {\n            uid\n            name\n            sectionType {\n              uid\n              name\n            }\n          }\n          product {\n            uid\n            name\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query StoreCategory($uid: ID!) {\n  storeCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}"): (typeof documents)["query StoreCategory($uid: ID!) {\n  storeCategory(id: $uid) {\n    uid\n    name\n    color\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RegisterSocial($socialAccessToken: String!, $socialBackend: String!) {\n  registerSocial(\n    input: {accessToken: $socialAccessToken, socialBackend: $socialBackend}\n  ) {\n    token\n  }\n}"): (typeof documents)["mutation RegisterSocial($socialAccessToken: String!, $socialBackend: String!) {\n  registerSocial(\n    input: {accessToken: $socialAccessToken, socialBackend: $socialBackend}\n  ) {\n    token\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation TokenAuth($username: String!, $password: String!) {\n  tokenAuth(input: {username: $username, password: $password}) {\n    token\n  }\n}"): (typeof documents)["mutation TokenAuth($username: String!, $password: String!) {\n  tokenAuth(input: {username: $username, password: $password}) {\n    token\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation VerifyToken($token: String!) {\n  verifyToken(input: {token: $token}) {\n    payload\n  }\n}"): (typeof documents)["mutation VerifyToken($token: String!) {\n  verifyToken(input: {token: $token}) {\n    payload\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Me {\n  me {\n    id\n    uid\n    username\n    email\n    firstName\n    lastName\n    avatar\n  }\n}"): (typeof documents)["query Me {\n  me {\n    id\n    uid\n    username\n    email\n    firstName\n    lastName\n    avatar\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;